#!/usr/bin/env node

const fs = require('fs')

console.log('pi')
const resolve = require('resolve')

function currentVals(str) {
	const options = {
		method: 'GET',
		url: 'http://download.finance.yahoo.com/d/quotes.csv?s=%40%5EDJI,' + str + '&f=nsl1op&e=.csv'
	}
	return  new Promise((resolve, reject) => {
		 resolve (axios(options))
	})
}

function readPFile(str) {
	return new Promise ((resolve, reject) => {
		fs.readFile(str, 'utf8',  function(err, data) {
			resolve(data)
		})
	})
	.then((res) => JSON.parse(res))
}

function writePFile(str, obj) {
	fs.writeFile(str, JSON.stringify(obj))
}


function getPortTotalWorth() {
	let counter = 0
	let total = 0
	new Promise((resolve, request) => {
		resolve(readPFile('./public/staticFiles/portfolio.json'))
	})
	.then((res) => res.map(( dat) => {
		let port = readPFile('./public/staticFiles/funds.json')
		port.then((val) => {
			val.forEach((valFunds) => {
				if(dat.symbol === valFunds.symbol) {
					new Promise((fulfill, rej) => {
						let fundsP = readPFile('./public/staticFiles/fund_prices.json')
						fundsP
						.then((valFundPrices) => {
							valFundPrices.forEach((valFundPrice) => {
								if(valFundPrice.symbol === dat.symbol) {
									let totalSharePrice = dat.shares * valFundPrice.price
									totalSharePrice = totalSharePrice
									total = total + totalSharePrice
									console.log(valFunds.name +':'+ dat.shares + ' shares at $' + valFundPrice.price + 
										' ea. -- $' + totalSharePrice.toFixed(2))
									if(counter === 5) {
										console.log('Total: $', total) 
									} else {
										counter ++
									}
								}
							})
						})
					})
				}
			})
		})
	}))
}

getPortTotalWorth()

function foo() {
	console.log('foo now')
}









